# services:
#  enabled:
#  - zerotier
#  disabled:
#  - nftables_exporter

render_services:
  - name: conntrackd
    src: conntrackd.conf
    dst: "/etc/conntrackd/conntrackd.conf"

  - name: keepalived
    src: keepalived.conf
    dst: "/etc/keepalived/keepalived.conf"

  - name: dhcrelay
    src: dhcrelay.conf
    dst: "/etc/dhcp/dhcrelay.conf"

  - name: bird
    src: bird.conf
    dst: "/etc/bird.conf"

  - name: keepalived-services
    src: keepalived-services.conf
    dst: "/run/keepalived-services.conf"
  
  - name: zerotier
    src: zerotier.conf
    dst: /etc/zerotier.conf

networks:
  eth0:
    mode: k8s
    k8s_subnets:
    - 10.96.0.0/12

  eth1:
    mode: service
    hwaddr: "6e:9e:4f:05:c9:f9"
    service:
      autostart: false
      start_on_master: true
      run_script: |
        #!/bin/sh
        ip ad flush dev eth1
        exec dhcpcd -B -C resolv.conf -h router eth1
      finish_script: |
        #!/bin/sh
        ip ad flush dev eth1
        ip li set dev eth1 state down

    qos:
      script: layer_cake.qos
      qdisc: cake
      bandwidth:
        down: 300000
        up: 300000
  
  eth2:
    mode: vrrp
    address: 192.168.0.1/24
  
  eth3:
    mode: vrrp
    address: 192.168.1.1/24

  eth4:
    mode: vrrp
    address: 192.168.192.1/24
  
  # Use a generated address here - we use multicast for replicating state
  eth5:
    mode: ipv4ll
    subnet: 192.168.192.0/29
    purpose: replication

bgp:
  global:
    router-id: 192.168.192.1
  neighbors:
    - name: peering
      config: |
        local as 64512;
        neighbor range 192.168.192.0/24 as 64512;
        rr client;
        graceful restart;
        ipv4 {
          import all;
          export all;
        };
    - name: calico
      config: |
        local as 64512;
        neighbor range 192.168.0.0/16 as 64512;
        rr client;
        graceful restart;
        multihop;
        ipv4 {
          import all;
          export where source = RTS_BGP;
        };
  extra_config: |
    filter reject_local_nets {
      if (net ~ [10.123.0.0/24, 10.121.0.0/24]) then {
        reject;
      }
      accept;
    }

zerotier:
  api_key: ""
  networks: []

dhcp_helper:
  # DHCP Server Side (upstream)
  upstream:
    addresses:
    - 192.168.0.2
    interfaces: 
    - "eth2"

  # DHCP Clients Side (downstream)
  downstream:
    interfaces:
    - "eth3"