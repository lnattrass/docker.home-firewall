apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Release.Name }}
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}
  template:
    metadata:
      annotations: 
        {{ .Values.annotations | toYaml | indent 8 | trim }}
        {{- if .Values.networks }}
        k8s.v1.cni.cncf.io/networks: {{ .Values.networks | toJson | quote }}{{ end }}

      labels:
        app.kubernetes.io/name: {{ .Release.Name }}
    spec:
      restartPolicy: Always
      tolerations: {{ .Values.tolerations | toYaml | nindent 8 }}
      {{- if .Values.node_selector }}
      nodeSelector:
        {{ .Values.node_selector | toYaml | indent 8 | trim }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ .Release.Name }}-config
      securityContext:
        sysctls:
        - name: net.ipv4.ip_forward
          value: "1"
      
      containers:
      - image: "{{ .Values.image }}"
        imagePullPolicy: "{{ .Values.image_pull_policy }}"
        name: {{ .Release.Name }}-firewall
        env:
        - name: CONFIG_SHA
          value: "{{ if .Values.rollout_on_config }}{{ .Values.config | toYaml | sha256sum }}{{else}}NA{{end}}"
        lifecycle:
          preStop:
            exec:
              command:
              - /usr/bin/lifecycle
              - shutdown
        readinessProbe:
          exec:
            command:
            - /usr/bin/lifecycle
            - ready
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 5
        securityContext:
          privileged: true
          capabilities:
            add: ["NET_ADMIN"]
        volumeMounts:
        - name: config
          mountPath: /etc/config
        resources:
{{ toYaml .Values.resources | indent 10 }}
